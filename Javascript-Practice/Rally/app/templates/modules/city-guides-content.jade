.page-content
  .city__header
    header.city__block
      h1
        span.city__wapper
          span.city__better It’s Better to
          span.city__travel Travel Well
        span.block__device-header
          span.iphone__graphic-highlight
          span.iphone__block
            span.iphone__device-group
              span.iphone__device-group--content
                span.iphone__device
                  span.iphone__shadow
                  span.iphone__chrome
                  span.iphone__device-content
                    span.iphone__screen
                      img(src="../images/hero-1%402x.jpg")
                span.iphone__device
                  span.iphone__shadow
                  span.iphone__chrome
                  span.iphone__device-content
                    span.iphone__screen
                      img(src="../images/hero-2%402x.jpg")
                span.iphone__device
                  span.iphone__shadow
                  span.iphone__chrome
                  span.iphone__device-content
                    span.iphone__screen
                      img(src="../images/hero-3%402x.jpg")
        span.city__arrive Than to Arrive
        span.city__attribution —Buddha
section.page-section.a-guide-to-your-travels
  .guides__block-number
    span 01
  h2.guides__title
    | A Guide to Your Travels
    p And Who Better to Guide You Than National Geographic?
  p.guides__desc
    | A passion for travel has been at the heart of the National Geographic Society since its founding in 1888. In the
    a(href="https://itunes.apple.com/us/app/city-guides-by-national-geographic/id592453480?mt=8" target="_blank") City Guides by National Geographic app
    |, this passion meets the smartphone age, putting the best of National Geographic’s travel advice directly in the hands of users.
  svg.travel__icon(xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', width='150px', height='150px', viewbox='0 0 150 150', enable-background='new 0 0 150 150', xml:space='preserve')
    g
      g
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M113.5,31.5c0-2.8-2.2-5-5-5h-66c-2.8,0-5,2.2-5,5v10c0,2.8,2.2,5,5,5h66c2.8,0,5-2.2,5-5V31.5z')
      g
        rect(x='57', y='26', fill='#9e8bd4', width='7', height='21')
        rect(x='86', y='26', fill='#9e8bd4', width='7', height='21')
      g
        rect(x='86', y='101', fill='#9e8bd4', width='7', height='7')
        rect(x='57', y='101', fill='#9e8bd4', width='7', height='7')
      g
        polygon(fill='#9e8bd4', points='71,93.2 75,97 79,93.2 79,91 71,91     ')
        rect(x='71', y='80', fill='#9e8bd4', width='8', height='5')
      rect(x='47.5', y='46.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='55', height='54')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M48,79.5c0,0,41,0,46.2,0c5.2,0,7.8-4.6,7.8-8.5')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M47.3,79.2')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M102.2,70.7')
      rect(x='69.3', y='57.3', transform='matrix(0.7071 0.7071 -0.7071 0.7071 66.5147 -34.5807)', fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='11.3', height='11.3')
      g
        line(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='73.5', y1='60.5', x2='73.5', y2='65.5')
        line(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='76.5', y1='60.5', x2='76.5', y2='65.5')
      rect(x='69.5', y='85.5', fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='11', height='5')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M108.3,107.5H41.7c-1.5,0-2.2,3.8-2.2,8.5c0,4.7,0.7,8.5,2.2,8.5h66.6c1.5,0,2.2-3.8,2.2-8.5C110.5,111.3,109.8,107.5,108.3,107.5z\
      ')
      path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='M43.5,116.5\
      c0-2.8,0.7-5,1.5-5h3.5')
      rect(x='102.5', y='59.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='10', height='31')
      rect(x='37.5', y='59.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='10', height='31')
      path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='M44.5,30.7\
      c-2,0-3,1.3-3,2.3c0,1,0,6.1,0,6.1')
      rect(x='74', y='87', fill='#9e8bd4', width='2', height='3')
section.page-section.find-interesting-things-faster
  .guides__block-number
    span 02
  h2.guides__title
    | Find Interesting Things Faster
    p Designing for Content
  p.guides__desc
    | From the initial conversations with National Geographic, it was clear that we would be adapting content from their acclaimed printed city guides. We worked closely to craft the existing information into a system with the consistency and structure necessary to make navigation easy (and storage in a database possible).
  p.guides__desc
    | We wound up with a variety of sections, from long-form What To Dos to bite-sized, sharable Did You Knows. In one section, users can learn about food experiences that shouldn’t be missed, and in another, users can view recommended walks and learn about each stop along the way.
  p.guides__desc
    | As a modern digital guidebook, it was important that City Guides made it simple for users to organically follow interesting information. To this end, we designed the data to allow for two simple interaction patterns:
  svg.travel__icon(xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', width='150px', height='150px', viewbox='0 0 150 150', enable-background='new 0 0 150 150', xml:space='preserve')
    g
      circle(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', cx='62.5', cy='66.3', r='25')
      path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='M49.1,79.8\
      c-7.4-7.4-7.4-19.5,0-26.9')
      polyline(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', points='\
      82.6,81.3 82.6,81.2 90.7,86.5 82.6,94.6 77.4,86.5 77.4,86.4   ')
      rect(x='95.2', y='84.5', transform='matrix(0.7071 -0.7071 0.7071 0.7071 -44.7544 102.0939)', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='11.4', height='41.2')
      line(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='89', y1='95', x2='110', y2='116')
      g
        path(fill='#9e8bd4', d='M62,20c5,0,9,4,9,9s-4,9-9,9s-9-4-9-9S57,20,62,20 M62,19c-5.5,0-10,4.5-10,10s4.5,10,10,10s10-4.5,10-10\
        S67.5,19,62,19L62,19z')
      g
        path(fill='#9e8bd4', d='M61,62.5l1.2-16c0-0.2,0.1-0.3,0.3-0.3c0.1,0,0.3,0.1,0.3,0.3l1.2,16c0.1,0.8-0.6,1.6-1.4,1.6\
        c-0.8,0.1-1.6-0.6-1.6-1.4C61,62.7,61,62.6,61,62.5z')
      g
        polygon(fill='#9e8bd4', points='61,74 62.2,71 62.8,71 64,74     ')
      circle(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', cx='62.4', cy='66.3', r='3.2')
      path(fill='#9e8bd4', d='M66,29c0-0.6-0.4-1-1-1h-6c-0.6,0-1,0.4-1,1v6c0,0.6,0.4,1,1,1h6c0.6,0,1-0.4,1-1V29z M61,34h-1v-4h1V34z')
      g
        g
          path(fill='#9e8bd4', d='M87.2,40.2c-0.4-0.4-1-0.4-1.4,0l-3.6,3.6c-0.4,0.4-0.4,1,0,1.4l3.6,3.6c0.4,0.4,1,0.4,1.4,0l3.6-3.6\
          c0.4-0.4,0.4-1,0-1.4L87.2,40.2z')
        g
          path(fill='#9e8bd4', d='M34.2,43.8c-0.4,0.4-0.4,1,0,1.4l3.6,3.6c0.4,0.4,1,0.4,1.4,0l3.6-3.6c0.4-0.4,0.4-1,0-1.4l-3.6-3.6\
          c-0.4-0.4-1-0.4-1.4,0L34.2,43.8z')
      rect(x='60', y='35', fill='#9e8bd4', width='4', height='6')

  ul.numbered-title-list
    li
      h3.numbered-title--cross
        | The Crosslink
      p.guides__desc
        | At the core of our content are actual locations, which we call Points of Interest. Let’s take a look at a specific Point of Interest: the Tower of London. The Tower of London has a What To Do, explaining briefly the history of the Tower, and what to do and see there. It also has a Did You Know fact, which could be shared on Twitter or Facebook. The Tower also has an entry in the Secrets section, with little-known details for the curious traveler. If a user reads the Did You Know and is interested to learn more, they will see crosslink buttons to the What To Do and Secret content, and a single tap will bring them to that related content.
    span.iphone__graphic-crosslink
      span.iphone__graphic-highlight
      span.iphone__block
        span.iphone__device-group
          span.iphone__device-group--content
            span.iphone__device
              span.iphone__shadow
              span.iphone__chrome
              span.iphone__device-content
                span.iphone__screen
                  img(src="../images/crosslink%402x.jpg")
            svg#Layer_1.iphone__lines(version='1.1', xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', viewbox='0 0 520 1046', enable-background='new 0 0 520 1046', xml:space='preserve')
              path(vector-effect='non-scaling-stroke', fill='none', stroke='#9e8bd4', stroke-width='2', stroke-miterlimit='10', stroke-dasharray='4.5,4', d='M198.3,684.7\
              c141,6.2,216.8-117.4,254.5-241.4')
              path(vector-effect='non-scaling-stroke', fill='none', stroke='#9e8bd4', stroke-width='2', stroke-miterlimit='10', stroke-dasharray='4.5,4', d='M198.3,756.1\
              c71-6.2,135-4.1,168,40.9')
            span.iphone__aux-content
              img.iphone__detail-crop(src="../images/zoom-dyk%402x.jpg")
              img.iphone__detail-crop(src="../images/zoom-secret%402x.jpg")
      .graphic-caption-content
        h4 Crosslink
        p The crosslink buttons allow users to jump immediately to other content related to the same Point of Interest
    li
      h3.numbered-title--deep
        | The Deeplink
      p.guides__desc
        | In a print guidebook, an intriguing mention of a related location will send the reader to dig through the index (or perhaps away from the book, to their search engine). In the City Guides app, we can allow users to simply tap on the name of an interesting place to learn about it. If the user is reading about Iconic Cafés in Paris, they can tap Les Deux Magots for a quick description, a link to its website, and all the information they need to check out one of Hemingway’s favorite haunts.
      span.iphone__graphic-deeplink
        span.iphone__graphic-highlight
        span.iphone__block
          span.iphone__device-group
            span.iphone__device-group--content
              span.iphone__device
                span.iphone__shadow
                span.iphone__chrome
                span.iphone__device-content
                  span.iphone__screen
                    img(src="../images/deeplink-1%402x.jpg")
               span.iphone__device
                span.iphone__shadow
                span.iphone__chrome
                span.iphone__device-content
                  span.iphone__screen
                    img(src="../images/deeplink-2%402x.jpg")
              span.iphone__tap
              span.iphone__arrow
              svg#Layer_1.iphone__lines(version='1.1', xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', viewbox='0 0 624 1046', enable-background='new 0 0 624 1046', xml:space='preserve')
                path(vector-effect='non-scaling-stroke', fill='none', stroke='#9e8bd4', stroke-width='2', stroke-miterlimit='10', stroke-dasharray='4.5,4', d='M115,549h163.7\
        c18.4,0,33.3-14.9,33.3-33.3V322c0-18.4,14.9-33.3,33.3-33.3h24.3')
        .graphic-caption-content
          h4 Deeplink
          p By tapping highlighted text in any text field, the user can deeplink into a Point of Interest view, presenting all pertinent information about the location.
section.page-section.a-spreadsheet-to-an-app
  .guides__block-number
    span 03
  h2.guides__title
    | From a Spreadsheet to an App
    p How We Parsed and Organized Data Into the App
  p.guides__desc
    | The initial data hand-off came in the form of Google Doc spreadsheets. To get it into a form that we could use in the app, were going to need to put it into a Django-based CMS. We created data models that mirrored the agreed-upon structure, and then it was a relatively simple task to convert the spreadsheets into CSV files. From there, we wrote Python scripts to crawl through the files, creating instances in Django. We ran our Django project off a SQLite database, so once all our data was in, we could simply drop the SQLite file into the app, using the third-party FMDB library to query data at run-time.
  svg.travel__icon(xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', width='150px', height='150px', viewbox='0 0 150 150', enable-background='new 0 0 150 150', xml:space='preserve')
    g
      rect(x='74', y='74', fill='#9e8bd4', width='3', height='27')
      rect(x='80', y='67', fill='#9e8bd4', width='3', height='34')
      rect(x='86', y='77', fill='#9e8bd4', width='3', height='24')
      rect(x='92', y='87', fill='#9e8bd4', width='3', height='14')
      circle(fill='#9e8bd4', cx='58.5', cy='84.5', r='1.5')
      circle(fill='#9e8bd4', cx='64.5', cy='85.5', r='1.5')
      circle(fill='#9e8bd4', cx='69.5', cy='78.5', r='1.5')
      polyline(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', points='54,90 \
      58.5,84 64.5,85.5 69,79   ')
      path(fill='#9e8bd4', d='M65,53h-9c0-2,2-4,4.5-4C63,49,65,51,65,53z')
      circle(fill='#9e8bd4', cx='60.5', cy='45.5', r='2.5')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M50.5,28.5v91h48v-91H50.5z')
      line(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='74', y1='33.5', x2='81', y2='33.5')
      rect(x='50.5', y='39.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='48', height='62')
      circle(fill='#9e8bd4', cx='74', cy='111', r='3')
      circle(fill='#9e8bd4', cx='67.5', cy='33.5', r='1.5')
      line(fill='none', stroke='#9e8bd4', stroke-miterlimit='10', x1='68', y1='44.5', x2='79', y2='44.5')
      line(fill='none', stroke='#9e8bd4', stroke-miterlimit='10', x1='82', y1='44.5', x2='93', y2='44.5')
      line(fill='none', stroke='#9e8bd4', stroke-miterlimit='10', x1='68', y1='48.5', x2='79', y2='48.5')
      line(fill='none', stroke='#9e8bd4', stroke-miterlimit='10', x1='82', y1='48.5', x2='93', y2='48.5')
      line(fill='none', stroke='#9e8bd4', stroke-miterlimit='10', x1='68', y1='52.5', x2='79', y2='52.5')
      line(fill='none', stroke='#9e8bd4', stroke-miterlimit='10', x1='82', y1='52.5', x2='93', y2='52.5')
      line(fill='none', stroke='#9e8bd4', stroke-miterlimit='10', x1='56', y1='56.5', x2='79', y2='56.5')
      line(fill='none', stroke='#9e8bd4', stroke-miterlimit='10', x1='82', y1='56.5', x2='93', y2='56.5')
      line(fill='none', stroke='#9e8bd4', stroke-miterlimit='10', x1='56', y1='60.5', x2='79', y2='60.5')
      line(fill='none', stroke='#9e8bd4', stroke-miterlimit='10', x1='82', y1='60.5', x2='93', y2='60.5')
section.page-section.getting-around-the-cities
  .guides__block-number
    span 04
  h2.guides__title
    | Getting Around the Cities
    p & Why We Used MapBox
  .graphic-caption-box
    h4 Why MapBox?
  p.guides__desc
    | From a creative perspective, it was important to us to be able to customize our maps to feel at-home in the app, with a look-and-feel that matched our interface. The MapBox service offered us tools to easily customize map tiles for our purpose. We wanted the maps to feel very urban, so we chose a de-saturated, darker palette, on which our brightly colored map pins and routing lines would pop.
  span.caption-box__around
    span.iphone__graphic-highlight
    span.iphone__block
      span.iphone__device-group
        span.iphone__device-group--content
          span.ipad__portrait
            span.ipad__shadow
            span.ipad__chrome
            span.iphone__device-content
              span.ipad__screen
                img(src="../images/why-mapbox%402x.jpg")
                span.ipad__video-player(data-video-url='http://com.rallyinteractive.cdn.s3.amazonaws.com/video/city-guides/why-mapbox.mov')
                  span.ipad__player-overlay
                    a(href="#")
  .graphic-caption-box
    h4 Color Coordination
  p.guides__desc
    | In the Walks and Itinerary sections, users are presented with routes, and we wanted to ensure there was a clear sense of motion from beginning to end. To achieve this, we chose to visualize routes with a specific color gradient from purple to blue. Because purple is the warmer color, we felt that it was more appropriate to indicate the beginning of each journey. As each route progresses, both the lines showing the route and the pins indicating points of interest along the way gradually transition to blue.
  span.caption-box__around
    span.iphone__graphic-highlight
    span.iphone__block
      span.iphone__device-group
        span.iphone__device-group--content
          span.ipad__portrait
            span.ipad__shadow
            span.ipad__chrome
            span.iphone__device-content
              span.ipad__screen
                img(src="../images/color-coordination%402x.jpg")
  .graphic-caption-box
    h4 Open Source SDK
  p.guides__desc
    | We’re not content to use the same old UI metaphors, particularly when they don’t serve our goals. With our maps in this app, we knew we wanted to integrate the concept of the crosslink, so the traditional map callout simply wasn’t going to cut it. We came up with the concept of the “bubble” callout, with up to 2 smaller crosslink callouts. Let’s be honest – this is pretty far outside the norm of customization options provided by existing map SDKs. Fortunately for us, MapBox provides an open-source SDK for their map, so we had the power to dive into the internals to allow ourselves the degree of control necessary for our UX goals.
  span.caption-box__block
    span.iphone__graphic-highlight
    span.iphone__block
      span.iphone__device-group
        span.iphone__device-group--content
          span.iphone__video
            span.iphone__shadow
            span.iphone__chrome
            span.iphone__device-content
              span.iphone__screen
                img(src="../images/open-source-sdk%402x.jpg")
                span.ipad__screen
                span.ipad__video-player(data-video-url='http://com.rallyinteractive.cdn.s3.amazonaws.com/video/city-guides/why-mapbox.mov')
                  span.ipad__player-overlay
                    a(href="#")
    .graphic-caption-content
      h4 The Bubble Callout
      p The “bubble” callout appears when a pin is tapped, presenting secondary crosslinks in addition to the primary What To Do content. This level of customization was possible because of the open-source nature of MapBox.
section.page-section.itinerary
  .guides__block-number
    span 05
  h2.guides__title
    | What Is an Itinerary?
    p How We Made an Itinerary Experience More Useful
  p.guides__desc
    | At its core, an itinerary is just a list. Since we already had a Favorites list, we had to seriously consider what value an Itinerary section would add for the user. In the end, it boiled down to what kinds of content are being saved. We decided that Favorites were a place to save specific pieces of content – What To Dos, Photos, etc. Itineraries, however, are strictly for Points of Interest – physical locations that a user can actually visit.
  span.caption-box__block-overflow
    span.iphone__graphic-highlight
    span.iphone__block.itinerary__block
      span.iphone__device-group
        span.iphone__device-group--content.slider-device
          span.iphone__device
            span.iphone__shadow
            span.iphone__chrome
            span.iphone__device-content
              span.iphone__screen
                img(src="../images/itinerary-1%402x.jpg")
          span.iphone__device
            span.iphone__shadow
            span.iphone__chrome
            span.iphone__device-content
              span.iphone__screen
                img(src="../images/itinerary-2%402x.jpg")
          span.iphone__device
            span.iphone__shadow
            span.iphone__chrome
            span.iphone__device-content
              span.iphone__screen
                img(src="../images/itinerary-3%402x.jpg")
        span.iphone__tap
        span.iphone__tap--itinerary
        span.iphone__arrow
        span.iphone__arrow--itinerary
        svg#Layer_1.iphone__lines(version='1.1', xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', viewbox='0 0 1736 1170', enable-background='new 0 0 1736 1170', xml:space='preserve')
          path(vector-effect='non-scaling-stroke', fill='none', stroke='#9e8bd4', stroke-width='2', stroke-miterlimit='10', stroke-dasharray='4.5,4', d='M41,651.5h333.8\
    c54.3,0,98.2-44,98.2-98.2v-130c0-54.3,44-98.2,98.2-98.2H627')
          path(vector-effect='non-scaling-stroke', fill='none', stroke='#9e8bd4', stroke-width='2', stroke-miterlimit='10', stroke-dasharray='4.5,4', d='M885,418h281.8\
    c54.3,0,98.2,44,98.2,98.2v65c0,54.3,44,98.2,98.2,98.2h55.8')
  .graphic-caption-box
    h4 Getting Around the Cities
  p.guides__desc
    | To be honest, when we built
    a(href="/national-parks/") National Parks
    | , the Itinerary section was a bit of an afterthought. We were so focused on the other features of the app, it kind of got lost in the shuffle. We’re not terribly comfortable with missed opportunities, so we were pretty excited to get a second run at the concept.
  p.guides__desc
    | Some of our improvements were simple UX considerations that were missing, like the ability to rename an itinerary. More central, though, was our focus on making the itinerary a helpful planning tool.
  span.caption-box__block-mistakes
    span.iphone__graphic-highlight
    span.iphone__block
      span.iphone__device-group
        span.iphone__device-group--content
          span.iphone__device
            span.iphone__shadow
            span.iphone__chrome
            span.iphone__device-content
              span.iphone__screen
                img(src="../images/learning-from-past-mistakes-1%402x.jpg")
          span.iphone__device
            span.iphone__shadow
            span.iphone__chrome
            span.iphone__device-content
              span.iphone__screen
                img(src="../images/learning-from-past-mistakes-2%402x.jpg")
          span.iphone__tap
          span.iphone__arrow
          svg#Layer_1.iphone__lines(version='1.1', xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', viewbox='0 0 420 1046', enable-background='new 0 0 420 1046', xml:space='preserve')
            path(vector-effect='non-scaling-stroke', fill='none', stroke='#8F64AA', stroke-width='2', stroke-miterlimit='10', stroke-dasharray='4.5,4', d='M105.8,347.9H183\
            c14.9,0,27-12.1,27-27s12.1-27,27-27h33.4')
    .graphic-caption-content
      h4 Renaming an Itinerary
      p The ability to rename an existing itinerary was one part of making the Itinerary section a useful planning tool for users.
  p.guides__desc
    | Since every location is geolocated, we wanted to plot them on a map and visualize a route between points. Turning an itinerary into a route posed a problem, however – unlike the curated content of our Walks section, a user itinerary is likely to be created without regard for the logistics of getting from place to place.
  p.guides__quote
    em We didn’t want users locked into illogical routes, so we created a toggle that shows an optimized route for their custom itinerary.
  svg.travel__icon(xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', width='150px', height='150px', viewbox='0 0 150 150', enable-background='new 0 0 150 150', xml:space='preserve')
    g
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M60.7,99.1')
      polyline(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', points='\
      60.7,99.1 33.6,106.6 33.6,55.3 60.7,47.5  ')
      line(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='108.7', y1='93.5', x2='111.9', y2='92.6')
      line(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='105.9', y1='97.4', x2='111.9', y2='95.6')
      polyline(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', points='\
      90.6,54.2 114.5,47.5 114.5,99.1 87.5,106.6  ')
      polyline(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', points='\
      67.3,49.5 60.7,47.5 60.6,47.9 60.5,47.9 60.5,48 60.5,53.4 60.5,53.5 60.5,53.5 60.5,72.7 60.5,72.7 60.5,95.6 60.5,95.6 \
      60.5,95.6 60.5,99.5 60.6,99.5 60.6,99.5 60.6,99.3 87.5,106.6 87.5,101.1 87.5,101.1 87.5,94.8 87.5,94.7 87.5,71.4 87.5,71.3 \
      87.5,60   ')
      polyline(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', points='68,54.6 \
      60.5,52 37.5,59.2 37.5,101.4 60.5,94.5 87.5,102.5 102.5,97.6 102.5,91.5 110,89  ')
      polyline(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', points='88.1,60 \
      110.5,53.1 110.5,89   ')
      g
        g
          path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', d='M42.3,85.5c0.3-0.4,0.6-0.8,0.9-1.2')
          path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-dasharray='3.024,3.024', d='\
          M45.1,81.9C64.5,59.5,72.8,92.2,87,95c21.3,4.2,18.3-35.4-4.7-21.1')
          path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', d='M81,74.7c-0.4,0.3-0.8,0.6-1.2,0.9')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M91.5,51.5c0,6.6-12,18-12,18s-12-11.4-12-18s5.4-12,12-12S91.5,44.9,91.5,51.5z')
      circle(fill='#9e8bd4', cx='106.2', cy='94.1', r='1.2')
      circle(fill='#9e8bd4', cx='79', cy='51', r='3')
  .graphic-caption-box
    h4 Routing That Gets Smarter
  p.guides__desc
    | When we decided that users should be able to view an optimized order for their itineraries, we just figured we’d be able to work out some quick logic for that. However, the more we explored the problem, we realized we were really dealing with a variant of the classic “Traveling Salesman Problem” – according to
    a(href="http://en.wikipedia.org/wiki/Travelling_salesman_problem") Wikipedia
    | “an NP-hard problem” and “one of the most intensively studied problems in optimization.” Oops
  p.guides__desc
    | With some research, we came across a series of posts by
    a(href="http://www.psychicorigami.com/") John Montgomery
    | , detailing
    a(href="http://www.psychicorigami.com/category/tsp/") TSP solutions in Python
    | . By adapting his code, we were able to build a solution that gives us fairly optimal solutions – fairly optimal because, as the number of locations increases, the number of potential combinations increases exponentially, which makes finding a concrete ‘most optimal’ solution incredibly expensive.
  p.guides__desc
    | To skirt this weakness, we created a system in our API to cache and compare routing solutions server-side to improve routes over time without over-burdening the server on any particular request.
  span.caption-box__block
    span.iphone__graphic-highlight
    span.iphone__block
      span.iphone__device-group
        span.iphone__device-group--content
          span.iphone__video
            span.iphone__shadow
            span.iphone__chrome
            span.iphone__device-content
              span.iphone__screen
                img(src="../images/video-gesture-main-menu.jpg")
                span.ipad__screen
                span.ipad__video-player(data-video-url='http://com.rallyinteractive.cdn.s3.amazonaws.com/video/city-guides/why-mapbox.mov')
                  span.ipad__player-overlay
                    a(href="#")
section.page-section.gesture
  .guides__block-number
    span 06
  h2.guides__title
    | How to Gesture
    p First, Do No Harm...
  p.guides__desc
    | Tapping is great. We love tapping on things. That being said, the ‘tap’ is only one part of what made the iPhone such a disruptive, scene-altering technology. Swiping and pinching were essential parts of iOS from the beginning. Obviously, we have standard scrolling content and maps that can be panned and zoomed, but beyond that, we have to be a little more thoughtful about our use of gestures. We have two guiding principles for the use of specialized gestures:
  ol.list
    li
      p No primary features should require a specialized gesture to access
    li
      p Specialized gestures can give power users access to less-important features as well as quicker ways to traverse primary features
  span.caption-box__block
    span.iphone__graphic-highlight
    span.iphone__block
      span.iphone__device-group
        span.iphone__device-group--content
          span.iphone__video
            span.iphone__shadow
            span.iphone__chrome
            span.iphone__device-content
              span.iphone__screen
                img(src="../images/video-gesture-main-menu.jpg")
                span.ipad__screen
                span.ipad__video-player(data-video-url='http://com.rallyinteractive.cdn.s3.amazonaws.com/video/city-guides/why-mapbox.mov')
                  span.ipad__player-overlay
                    a(href="#")
section.page-section.custom-animation
  .guides__block-number
    span 07
  h2.guides__title
    | Custom Animation
    p Someday the Developers Will Have Their Revenge
  p.guides__desc
    | The iOS SDK gives developers the ability to quickly and easily create animations that are pretty good. Unfortunately, our ambitions are a bit higher than
  svg.travel__icon(xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', width='150px', height='150px', viewbox='0 0 150 150', enable-background='new 0 0 150 150', xml:space='preserve')
    g
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M102.5,80.1c0-4.8-3.9-8.6-8.6-8.6H47.1c-4.8,0-8.6,3.9-8.6,8.6v28.8c0,4.8,3.9,8.6,8.6,8.6h46.8c4.8,0,8.6-3.9,8.6-8.6V80.1z')
      circle(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', cx='52', cy='52', r='12.5')
      path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='M43.5,51.5\
      c0.4-4.5,3.8-8,8-8')
      circle(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', cx='88.5', cy='48.5', r='16')
      path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='M77,45\
      c1.4-4,4.8-7.1,9-8')
      line(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='88', y1='64.5', x2='52', y2='64.5')
      line(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='51.9', y1='39.7', x2='83.3', y2='32.8')
      rect(x='108.5', y='83.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='13', height='21')
      rect(x='38.5', y='81.5', fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='19', height='5')
      rect(x='102.5', y='87.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='6', height='13')
      rect(x='25.5', y='88.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='8', height='11')
      rect(x='33.5', y='89.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='5', height='9')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M122.2,84.3c2.5,2.3,3.3,6.1,3.3,9.7s-0.8,6.3-3.3,8.5')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M109.4,104.8c-0.3-0.1-0.6-0.3-0.9-0.4')
      line(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linejoin='round', stroke-miterlimit='10', x1='58.5', y1='72', x2='58.5', y2='117')
      line(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='109', y1='89.5', x2='121', y2='89.5')
      line(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='109', y1='91.5', x2='121', y2='91.5')
      line(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='109', y1='93.5', x2='121', y2='93.5')
      line(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='88.5', y1='71', x2='88.5', y2='48')
      line(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='51.5', y1='71', x2='51.5', y2='52')
      circle(fill='#9e8bd4', cx='80', cy='107', r='4')
      g
        path(fill='#9e8bd4', d='M91,104c1.7,0,3,1.3,3,3s-1.3,3-3,3s-3-1.3-3-3S89.3,104,91,104 M91,103c-2.2,0-4,1.8-4,4s1.8,4,4,4\
        s4-1.8,4-4S93.2,103,91,103L91,103z')
  .graphic-caption-box
    h4 Prototyping
  p.guides__desc
    | Whenever we have the time, we start by prototyping our animations in After Effects. Free from the immediate concerns of feasibility, we can go crazy, exploring different variations of timing, easing, and 3D transforms. These prototypes are essential as a communication tool, allowing us to give National Geographic a quick look at our thinking as well as starting a dialogue between the designers and developers.
  .featured-image
    img(src="../images/city-guides-prototyping%402x.jpg")
  .graphic-caption-box
    h4 The Devil’s in the Details
  p.guides__desc
    | Based on our prototypes, we can start to rough in the animations into our builds. We don’t like to get too precious about the animations in the beginning – the differences in 3D projections between After Effects and iOS make the porting of values an inexact science, so we tend to focus on broad strokes, setting up basic transforms and multi-part animations we know we’ll need.
  p.guides__desc
    | Often, these rough animations will persist in the build for quite some time while we build other features. As deadlines approach (often, the day of submission), we get serious about these.
  p.guides__desc
    | The process generally entails a developer (whoever has the most patience left) sitting side-by-side with a designer, tweaking values to fine-tune the animation into the precise, sexy beast that we’re looking for. This process can quite literally go on for hours; in this case, the tuning of the main card-flip animation took the better part of a day.
  span.caption-box__block
    span.iphone__graphic-highlight
    span.iphone__block
      span.iphone__device-group
        span.iphone__device-group--content
          span.iphone__video
            span.iphone__shadow
            span.iphone__chrome
            span.iphone__device-content
              span.iphone__screen
                img(src="../images/video-gesture-main-menu.jpg")
                span.ipad__screen
                span.ipad__video-player(data-video-url='http://com.rallyinteractive.cdn.s3.amazonaws.com/video/city-guides/why-mapbox.mov')
                  span.ipad__player-overlay
                    a(href="#")
  svg.travel__icon(xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', width='150px', height='150px', viewbox='0 0 150 150', enable-background='new 0 0 150 150', xml:space='preserve')
    g
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M39.5,113.5v18h9.8c0-5,3.5-8,7.8-8h32.1c4.3,0,7.8,3,7.8,8h9.6v-18H39.5z')
      rect(x='34.5', y='102.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='77', height='11')
      g
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M77.3,45.4C55.1,48.3,39.5,67,39.5,90v12')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M79.2,60.6c-0.5,0.1-1,0.2-1.5,0.4C65,64.6,55.4,75.9,54.4,89.5')
      path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='M66.4,52.6\
      C57.9,57.2,51.1,64.4,47,73.1')
      polyline(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', points='\
      85.5,63 85.5,73.5 91.7,73.5 101.4,73.5 107.5,73.5 107.5,30.5 101.4,30.5 91.7,30.5 85.5,30.5 85.5,43   ')
      rect(x='91.5', y='73.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='10', height='7')
      rect(x='91.5', y='23.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='10', height='7')
      rect(x='88.5', y='16.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='16', height='7')
      circle(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', cx='85.3', cy='52.6', r='10.1')
      path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='M79,52.6\
      c0-3.5,2.8-6.3,6.3-6.3')
      line(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='106.9', y1='94.5', x2='59.2', y2='94.5')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M54.3,94.5')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M55.2,94.5')
      circle(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', cx='54.5', cy='94.5', r='5')
      polyline(fill='none', stroke='#9e8bd4', stroke-linejoin='round', stroke-miterlimit='10', points='89.5,39 89.5,34.5 92,34.5  ')
section.page-section.universal-app
  .guides__block-number
    span 08
  h2.guides__title
    | Building a Universal App
    p Or, How We Avoided Losing Our Minds
  p.guides__desc
    | Like
    a(href="/national-parks/") National Parks
    | , we knew from the beginning that we’d be building both an iPhone and iPad version of City Guides. You have to start somewhere, so we knew we’d be focusing on the iPhone version first, both in design and development, and then circling back for the iPad.
  span.iphone__building-universal
    span.iphone__graphic-highlight
    span.iphone__block
      span.iphone__device-group
        span.iphone__device-group--content
          span.iphone__device
            span.iphone__shadow
            span.iphone__chrome
            span.iphone__device-content
              span.iphone__screen
                img(src="../images/universal-ipad%402x.jpg")
          span.ipad__portrait
            span.ipad__shadow
            span.ipad__chrome
            span.iphone__device-content
              span.ipad__screen
                img(src="../images/universal-ipad%402x.jpg")
  .graphic-caption-box
    h4 Wildly Divergent Sizes
  p.guides__desc
    | There was a simple reason to start with the iPhone: the screen is smaller. We had to figure out how to solve all our UX challenges with the real estate available to us. This cut both ways, though – sometimes we would come up with a great solution on the iPhone, but when it came to designing the iPad version, that solution simply wouldn’t work anymore. Perhaps using the extra space created awkward deadzones or a layout didn’t work in the larger format.
  p.guides__desc
    | To get a leg up on these design problems, we started by choosing a portrait-only orientation for the iPad app. We knew a tablet app shouldn’t simply be a scaled up version of the phone app, but keeping a similar aspect ratio helped.
  p.guides__quote
    em There was a simple reason to start with the iPhone: the screen is smaller.
  p.guides__desc
    | We found that list views, which were a staple of the iPhone version, were problematic on the iPad. Native apps generally solve that problem using a split-screen or popover, but we weren’t satisfied with those solutions. Inspired by grid-based products like Pinterest, we settled on presenting our lists as grids on the iPad.
  p.guides__desc
    | In the case of our context menu, we discovered that our iPhone solution looked silly on the iPad. We instead created a whole new paradigm for the menu, and we liked it so much that we decided to port it back to the iPhone to replace our original design.
  svg.travel__icon(xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', width='150px', height='150px', viewbox='0 0 150 150', enable-background='new 0 0 150 150', xml:space='preserve')
    g
      rect(x='27.5', y='39.5', fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', width='93', height='57')
      polygon(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', points='\
      87.5,109.5 60.5,109.5 64.1,96.5 83.9,96.5   ')
      g
        path(fill='#9e8bd4', d='M40.2,67.4c-0.1-0.2-0.1-0.2-0.4-0.2h-1.5c-0.2,0-0.3,0-0.4,0.2l-0.3,1c-0.1,0.4-0.2,0.7-0.2,0.8\
        c0,0.1,0,0.2,0.3,0.2l0.3,0c0.1,0,0.1,0.2,0,0.2c-0.3,0-0.6,0-1,0c-0.3,0-0.7,0-0.9,0c-0.1,0-0.1-0.2,0-0.2l0.3,0\
        c0.2,0,0.5-0.1,0.6-0.5c0.2-0.5,0.5-1.1,0.9-2.2l1-2.6c0.1-0.4,0.2-0.5,0.2-0.7c0.2-0.1,0.4-0.2,0.5-0.4c0.1,0,0.1,0,0.1,0.1\
        c0.1,0.4,0.3,0.9,0.4,1.3l1.3,3.9c0.3,0.8,0.4,1,0.8,1l0.3,0c0.1,0,0,0.2,0,0.2c-0.4,0-0.7,0-1.2,0c-0.5,0-0.8,0-1.1,0\
        c-0.1,0-0.1-0.2,0-0.2l0.3,0c0.2,0,0.3-0.1,0.3-0.2c0-0.1,0-0.3-0.1-0.5L40.2,67.4z M38.3,66.5c-0.1,0.2-0.1,0.2,0.2,0.2h1.2\
        c0.3,0,0.3,0,0.2-0.3l-0.5-1.6c-0.1-0.2-0.2-0.5-0.2-0.6h0c0,0-0.1,0.3-0.2,0.6L38.3,66.5z')
      g
        path(fill='#9e8bd4', d='M109.5,67.8c-0.2-0.5-0.3-0.6-1-0.6h-3.7c-0.6,0-0.8,0.1-0.9,0.6l-0.9,2.6c-0.4,1.1-0.5,1.8-0.5,2\
        c0,0.3,0.1,0.4,0.7,0.5l0.8,0.1c0.2,0.1,0.2,0.5,0,0.6c-0.6,0-1.4,0-2.5-0.1c-0.8,0-1.7,0-2.3,0.1c-0.1-0.1-0.2-0.5,0-0.6l0.8-0.1\
        c0.6,0,1.1-0.3,1.5-1.2c0.4-1.1,1.1-2.7,2.1-5.4l2.5-6.6c0.3-0.9,0.5-1.3,0.4-1.7c0.6-0.2,1-0.6,1.3-0.9c0.1,0,0.3,0,0.4,0.2\
        c0.3,1.1,0.7,2.2,1.1,3.3l3.3,9.8c0.7,2.1,1,2.5,2.1,2.6l0.7,0.1c0.2,0.1,0.1,0.5,0,0.6c-1,0-1.8-0.1-2.9-0.1\
        c-1.2,0-2.1,0-2.8,0.1c-0.2-0.1-0.2-0.5,0-0.6l0.7-0.1c0.5,0,0.9-0.2,0.9-0.4c0-0.3-0.1-0.7-0.3-1.3L109.5,67.8z M104.7,65.6\
        c-0.2,0.6-0.2,0.6,0.5,0.6h3c0.7,0,0.8-0.1,0.5-0.8l-1.3-4c-0.2-0.6-0.4-1.2-0.6-1.5h0c-0.1,0.1-0.3,0.7-0.6,1.4L104.7,65.6z')
      circle(fill='#9e8bd4', cx='56.5', cy='66.5', r='3.5')
      line(fill='none', stroke='#9e8bd4', stroke-linejoin='round', stroke-miterlimit='10', x1='48', y1='66.5', x2='95', y2='66.5')
      circle(fill='#9e8bd4', cx='74', cy='91', r='2')
      line(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linejoin='round', stroke-miterlimit='10', x1='28', y1='85.5', x2='120', y2='85.5')
      rect(x='34', y='46', fill='#9e8bd4', width='2', height='2')
      rect(x='38', y='46', fill='#9e8bd4', width='2', height='2')
      rect(x='42', y='46', fill='#9e8bd4', width='2', height='2')
      g
        rect(x='111', y='45', fill='#9e8bd4', width='1', height='1')
        rect(x='112', y='46', fill='#9e8bd4', width='1', height='1')
        rect(x='111', y='47', fill='#9e8bd4', width='1', height='1')
        rect(x='113', y='45', fill='#9e8bd4', width='1', height='1')
        rect(x='113', y='47', fill='#9e8bd4', width='1', height='1')
  .graphic-caption-box
    h4 Shared Data Models or Bust
  p.guides__desc
    | You never want to have to build your data models twice. We made sure we were building pure data models that could be shared across both platforms.
  p.guides__desc
    | This time around we leaned heavily on the use of on-demand getters, so that we only had to load data from the database into memory when we need it, rather than loading everything at the top.
  p.guides__desc
    | We were able to use what we learned on
    a(href="/national-parks/") Nation park
    | to build a cleaner, simpler interface for fetching and caching data in memory – as developers, we’re always working to create better ways to protect us from ourselves.
  span.iphone__building-universal
    span.iphone__graphic-highlight
    span.iphone__block.building-universal
      span.iphone__device-group
        span.iphone__device-group--content
          span.iphone__device
            span.iphone__shadow
            span.iphone__chrome
            span.iphone__device-content
              span.iphone__screen
                img(src="../images/shared-data-ipad%402x.jpg")
          span.ipad__portrait
            span.ipad__shadow
            span.ipad__chrome
            span.iphone__device-content
              span.ipad__screen
                img(src="../images/shared-data-ipad%402x.jpg")
  .graphic-caption-box
    h4 Separate Views
  p.guides__desc
    | While it’s important to keep our data models reusable, the same isn’t true for our views and view controllers. Very often, the layouts are different enough that there would be no benefit to trying to write code that would work for both. Even in the event of views that look very similar between devices, the difference in form factor means that sizes and spacing will end up being different.
  p.guides__desc
    | In our app delegate, we do a check to determine which device family we’re running, and from there we init the root view controller built specifically for that device and never look back.
  svg.travel__icon(xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', width='150px', height='150px', viewbox='0 0 150 150', enable-background='new 0 0 150 150', xml:space='preserve')
    g
      g
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M55,46.7c4-9.4,13.7-14.8,24.3-13.7c9,0.9,16.3,6,19.6,13.8')
        rect(x='68.7', y='37.8', transform='matrix(0.9691 -0.2466 0.2466 0.9691 -8.1479 19.3485)', fill='#9e8bd4', width='8.9', height='8.9')
        rect(x='82.4', y='41.6', transform='matrix(0.6981 0.716 -0.716 0.6981 59.194 -48.2836)', fill='#9e8bd4', width='8.9', height='8.9')
        polygon(fill='#9e8bd4', points='66.6,55.3 68.7,48.8 60.2,46.1 58.9,50.4     ')
        polyline(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', points='\
        87.1,55.5 87.3,54.7 88.4,55     ')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M113.5,95.5v7c0,8.2-6.8,15-15,15h-43c-8.2,0-14.9-6.4-14.9-14.7V95')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M113.5,74V61.3c0-8.2-6.5-14.9-14.6-15c-5.1,6.5-13,11.2-21.9,11.2s-16.7-4.7-21.7-11.2c-8.2,0.1-14.8,6.8-14.8,15v8.5V74')
      path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='M44.5,63\
      c0-6.9,2.3-11.9,9.2-12c0.9,1.2,1.9,2.2,3,3.2')
      path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
      M114,74c-19.2-9.7-66.5-9.1-79.5,3.9v13.1c11,11.8,74,11.3,85,0V77.8C118.5,76.4,116.3,75.1,114,74')
      path(fill='none', stroke='#9e8bd4', stroke-miterlimit='10', d='M42.5,79.7v8.7c9,7.8,60,7.5,69,0v-8.7C100.5,70.7,53.5,70,42.5,79.7\
      z')
      line(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='40.6', y1='70.2', x2='32.2', y2='61.8')
      line(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='40.7', y1='59.9', x2='37.4', y2='56.6')
      path(fill='none', stroke='#9e8bd4', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='M25.6,57\
      c-1.9-1.9-1.9-5.1,0-7c1-1,2.2-1.5,3.5-1.5')
      path(fill='#9e8bd4', d='M63,86.2c0,1.5-1.2,2.8-2.8,2.8h-4.5c-1.5,0-2.8-1.2-2.8-2.8v-4.5c0-1.5,1.2-2.8,2.8-2.8h4.5\
      c1.5,0,2.8,1.2,2.8,2.8V86.2z')
      path(fill='#9e8bd4', d='M101,86.2c0,1.5-1.2,2.8-2.8,2.8h-4.5c-1.5,0-2.8-1.2-2.8-2.8v-4.5c0-1.5,1.2-2.8,2.8-2.8h4.5\
      c1.5,0,2.8,1.2,2.8,2.8V86.2z')
      circle(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', cx='29.5', cy='53.5', r='9')
  .graphic-caption-box
    h4 Reducing Bloat
  p.guides__desc
    | One of the best things about partnering with National Geographic is the inclusion of their incredible photography. Unfortunately, those beautiful photos can come at a hefty filesize cost, particularly when dealing with the truly absurd resolution of the Retina iPad.
  p.guides__desc
    | We wanted to ensure that the app would have a light footprint when you download it from the store, so we built a solution for downloading and storing photos on-demand. This required some fancy footwork, allowing downloads to resume from partial files, dynamically changing the prioritization of downloads, and resizing photos without blocking the main thread.
  svg.travel__icon(xmlns='http://www.w3.org/2000/svg', xmlns:xlink='http://www.w3.org/1999/xlink', x='0px', y='0px', width='150px', height='150px', viewbox='0 0 150 150', enable-background='new 0 0 150 150', xml:space='preserve')
    g
      circle(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', cx='74.5', cy='74.5', r='44')
      g
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M110.5,74.5c0,6.3-3.9,8.5-6.7,13.6c-2.1,3.7-1.5,9.6-4.7,12.4c-3.4,3-8.6,2.2-13,3.7c-3.7,1.3-7.6,6.2-11.7,6.2\
        c-4.7,0-7.1-4.2-11.2-5.8c-3.7-1.4-9.1-0.1-12.1-2.6c-3.4-2.9-3.5-8.2-5.7-12.1c-2.8-5.1-6.9-7-6.9-13.2c0-4.5,4.1-9.3,5.6-13.3\
        c1.7-4.4,0.6-10.1,3.8-13.5c3.1-3.3,10.4-3.7,14.6-5.7c4.7-2.2,6.4-5.8,11.9-5.8c5.1,0,7.4,4.5,11.8,6.4c4.6,2,11.2,1.4,14.6,5\
        c3.9,4.1,3.1,8,4.7,13.5C106.3,66.6,110.5,71.1,110.5,74.5z')
        circle(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', cx='74.5', cy='74.5', r='8')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M52.9,54.9c0,0,1.7,4.1,0,7.8')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M88.1,74.3c0,0,2.4,2.3,5.5,3')
        line(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', x1='98.3', y1='60.2', x2='94.5', y2='65.1')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M85.9,60.2c0,0,2,2.8,0,6.2')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M72.1,46.5c-2,1.6-0.9,3.8,0,7.8')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M59.3,65.7c1.7,4.3,0,7.8,0,7.8')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M62.1,55.3c0,0,4.2,1.2,5.1,5.2')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M51.5,75.2c-3.5,3.1-4.7,5.6-4.7,5.6')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M87.1,49.7c-0.1,2.6-2.6,2.9-6.3,4.5')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M100.9,75.2c0,0,1.7,4.1,0,7.8')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M90.9,87.5c2.1,0.7,0,7.8,0,7.8')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M75.3,89.6c2.1,0.7,6.7-0.5,6.7-0.5')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M74.5,96.6c0,0-0.1,2.8-1.7,6.4')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M64,92.7c0,0-0.9,2.1-3.9,4.6')
        path(fill='none', stroke='#9e8bd4', stroke-width='3', stroke-linecap='round', stroke-linejoin='round', stroke-miterlimit='10', d='\
        M56.5,83c-0.1,0.5,0.9,6.7,0.9,6.7')
section.page-section.city-guides-response
  .guides__block-number
    span 10
  h2.guides__title
    | Response
    p Repeat Clients are the highest compliments
  p.guides__desc
    em For several years, National Geographic had wanted to create a City Guides app. In order to stand out in a very crowded category, execution was paramount. When Rally exceeded our expectations on the National Parks app, we knew we had found the ideal partner to help us craft something special. Rally understood from the start that National Geographic’s value proposition is quality, hand­picked content, and that the interface needed to convey this at a glance. They worked tirelessly with us throughout the entire process, providing us with as many wireframes, designs, and prototypes as necessary to get it right. The result is an elegant, useful, and completely differentiated urban travel app. The Rally team is an exceptional group of talented and dedicated professionals who consistently deliver on our brand promise.
  p.guides__caption
    span Rachel Graham
    | , Senior Director, Digital Book Publishing, National Geographic Society
section.page-section-footer.itinerary
  .dribbble__title
    h2
      a.dribbble__more(href="https://dribbble.com/rally/projects/212216") More of Our Process
      | on
      a.logo-dribbble(href="https://dribbble.com/rally/projects/212216") Dribbble
  .dribbble-shots
    .dribbble-shots-inner
      .dribbble-shots--bg
        span.fill-rotate
        img(src='../images/img-footer-pattern-new.png')
      img.dribbble-shots--image(src='../images/yellow.png')
      .link__text
        p Start & more
    .dribbble-shots-inner
      .dribbble-shots--bg
        span.fill-rotate
        img(src='../images/img-footer-pattern-new.png')
      img.dribbble-shots--image(src='../images/_weather_section_on_ipad_1x.jpg')
      .link__text
        p Start & more
    .dribbble-shots-inner
      .dribbble-shots--bg
        span.fill-rotate
        img(src='../images/img-footer-pattern-new.png')
      img.dribbble-shots--image(src='../images/_essentials-render_1x.png')
      .link__text
        p Start & more
    .dribbble-shots-inner
      .dribbble-shots--bg
        span.fill-rotate
        img(src='../images/img-footer-pattern-new.png')
      img.dribbble-shots--image(src='../images/_what-to-do_1x.jpg')
      .link__text
        p Start & more
    .dribbble-shots-inner
      .dribbble-shots--bg
        span.fill-rotate
        img(src='../images/img-footer-pattern-new.png')
      img.dribbble-shots--image(src='../images/weather-small_1_00181.png')
      .link__text
        p Start & more
    .dribbble-shots-inner
      .dribbble-shots--bg
        span.fill-rotate
        img(src='../images/img-footer-pattern-new.png')
      img.dribbble-shots--image(src='../images/_essentials-render_1x.png')
      .link__text
        p Start & more
